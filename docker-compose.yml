version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: unhook-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-unhook}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-unhook_password}
      POSTGRES_DB: ${POSTGRES_DB:-unhook}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-unhook}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: unhook-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL:-/sign-in}
        NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL:-/sign-up}
        NEXT_PUBLIC_POSTHOG_KEY: ${NEXT_PUBLIC_POSTHOG_KEY:-}
        NEXT_PUBLIC_POSTHOG_HOST: ${NEXT_PUBLIC_POSTHOG_HOST:-https://app.posthog.com}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    container_name: unhook-web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      POSTGRES_URL: postgresql://${POSTGRES_USER:-unhook}:${POSTGRES_PASSWORD:-unhook_password}@postgres:5432/${POSTGRES_DB:-unhook}?sslmode=disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379

      # Clerk Authentication
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET}

      # Analytics (optional)
      POSTHOG_KEY: ${POSTHOG_KEY:-}

      # Application
      NODE_ENV: ${NODE_ENV:-production}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}

      # Webhook Configuration
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL:-http://localhost:3000}
      WEBHOOK_ENCRYPTION_KEY: ${WEBHOOK_ENCRYPTION_KEY}
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - web_uploads:/app/uploads

  # Webhook Router Service
  webhook-router:
    build:
      context: .
      dockerfile: Dockerfile.router
    container_name: unhook-router
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    environment:
      # Database
      POSTGRES_URL: postgresql://${POSTGRES_USER:-unhook}:${POSTGRES_PASSWORD:-unhook_password}@postgres:5432/${POSTGRES_DB:-unhook}?sslmode=disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379

      # Router Configuration
      ROUTER_PORT: ${ROUTER_PORT:-8080}
      ROUTER_HOST: ${ROUTER_HOST:-0.0.0.0}
      ENCRYPTION_KEY: ${WEBHOOK_ENCRYPTION_KEY}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${ROUTER_PORT:-8080}:8080"

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: unhook-nginx
    restart: unless-stopped
    depends_on:
      - web
      - webhook-router
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_logs:/var/log/nginx
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  web_uploads:
  nginx_certs:
  nginx_logs: