name: "Release JetBrains Extension"
description: "Build, sign, and publish JetBrains plugin to JetBrains Marketplace and create GitHub release"

inputs:
  version:
    description: "Version number for the release"
    required: true
  marketplace_token:
    description: "Token for JetBrains Marketplace"
    required: true
  certificate_chain:
    description: "Certificate chain for plugin signing"
    required: false
  private_key:
    description: "Private key for plugin signing"
    required: false
  private_key_password:
    description: "Password for private key"
    required: false

runs:
  using: composite
  steps:
    - name: Setup Environment
      uses: ./tooling/github/setup

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: wrapper

    - name: Validate Gradle wrapper
      shell: bash
      working-directory: apps/jetbrains-extension
      run: ./gradlew wrapper --gradle-version=8.5

    - name: Build Plugin
      shell: bash
      working-directory: apps/jetbrains-extension
      run: |
        echo "Building JetBrains plugin..."
        ./gradlew build

        echo "✅ Plugin built successfully"

    - name: Verify Plugin
      shell: bash
      working-directory: apps/jetbrains-extension
      run: |
        echo "Verifying plugin compatibility..."
        ./gradlew verifyPlugin

        echo "✅ Plugin verification completed"

    - name: Sign Plugin
      shell: bash
      working-directory: apps/jetbrains-extension
      if: ${{ inputs.certificate_chain != '' && inputs.private_key != '' }}
      env:
        JETBRAINS_CERTIFICATE_CHAIN: ${{ inputs.certificate_chain }}
        JETBRAINS_PRIVATE_KEY: ${{ inputs.private_key }}
        JETBRAINS_PRIVATE_KEY_PASSWORD: ${{ inputs.private_key_password }}
      run: |
        echo "Signing plugin..."
        ./gradlew signPlugin

        echo "✅ Plugin signed successfully"

    - name: Build Plugin Distribution
      shell: bash
      working-directory: apps/jetbrains-extension
      run: |
        echo "Building plugin distribution..."
        ./gradlew buildPlugin

        # Verify the expected file was created
        EXPECTED_FILE="build/distributions/unhook-jetbrains-${{ inputs.version }}.zip"
        if [ ! -f "$EXPECTED_FILE" ]; then
          echo "Expected distribution file not found at: $EXPECTED_FILE"
          echo "Listing available files in build/distributions/:"
          ls -la build/distributions/ || echo "No distributions directory found"
          exit 1
        fi

        echo "✅ Distribution created: $EXPECTED_FILE"

    - name: Publish to JetBrains Marketplace
      shell: bash
      working-directory: apps/jetbrains-extension
      env:
        JETBRAINS_MARKETPLACE_TOKEN: ${{ inputs.marketplace_token }}
      run: |
        echo "Publishing to JetBrains Marketplace..."
        
        # Publish the plugin
        ./gradlew publishPlugin

        echo "✅ Successfully published to JetBrains Marketplace!"

    - name: Read changelog
      id: changelog
      shell: bash
      working-directory: apps/jetbrains-extension
      run: |
        # Read the changelog file
        if [ ! -f "CHANGELOG.md" ]; then
          echo "CHANGELOG.md not found, using default release notes"
          echo "body=Release of JetBrains extension v${{ inputs.version }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        CHANGELOG=$(cat CHANGELOG.md)
        VERSION="${{ inputs.version }}"

        # Find the start of the version section
        START_LINE=$(echo "$CHANGELOG" | grep -n "^## \[$VERSION\]" | cut -d: -f1)
        if [ -z "$START_LINE" ]; then
          # Try without brackets
          START_LINE=$(echo "$CHANGELOG" | grep -n "^## $VERSION" | cut -d: -f1)
        fi
        
        if [ -z "$START_LINE" ]; then
          echo "Could not find version $VERSION in changelog, using default release notes"
          echo "body=Release of JetBrains extension v${{ inputs.version }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Find the next version section or end of file
        NEXT_VERSION_LINE=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)) | grep -n "^## " | head -n 1 | cut -d: -f1)

        if [ -z "$NEXT_VERSION_LINE" ]; then
          # If no next version found, take everything until the end
          BODY=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)))
        else
          # Take content until the next version
          BODY=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)) | head -n $((NEXT_VERSION_LINE - 1)))
        fi

        # Clean up the content
        BODY=$(echo "$BODY" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

        # Set output
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: jetbrains-v${{ inputs.version }}
        name: JetBrains Extension v${{ inputs.version }}
        body: ${{ steps.changelog.outputs.body }}
        draft: false
        prerelease: false
        files: |
          apps/jetbrains-extension/build/distributions/unhook-jetbrains-${{ inputs.version }}.zip
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jetbrains-plugin-${{ inputs.version }}
        path: |
          apps/jetbrains-extension/build/distributions/unhook-jetbrains-${{ inputs.version }}.zip
          apps/jetbrains-extension/build/reports/
        retention-days: 30