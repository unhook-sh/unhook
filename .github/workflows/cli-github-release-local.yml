name: CLI Github Release (Local Testing)

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

env:
  FORCE_COLOR: 3
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
  NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
  POSTHOG_PERSONAL_API_KEY: ${{ secrets.POSTHOG_PERSONAL_API_KEY }}
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_APP_ENV: production
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  build:
    # Single platform for local testing
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            target: arm64
            binary_ext: ""
            needs_codesign: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./tooling/github/cli/build
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          binary_ext: ${{ matrix.binary_ext }}
          needs_codesign: false

      - name: Test built binary
        shell: bash
        run: |
          echo "🧪 Testing the built binary..."

          # Set binary path based on matrix values
          BINARY_NAME="unhook-${{ matrix.platform }}-${{ matrix.target }}${{ matrix.binary_ext }}"
          BINARY_PATH="apps/cli/bin/${BINARY_NAME}"

          echo "Looking for binary: $BINARY_PATH"

          # Check if binary exists
          if [ ! -f "$BINARY_PATH" ]; then
            echo "❌ Binary not found at: $BINARY_PATH"
            echo "📁 Available files in apps/cli/bin/:"
            ls -la apps/cli/bin/ || echo "Directory doesn't exist"
            exit 1
          fi

          echo "✅ Found binary at: $BINARY_PATH"

          # Make it executable
          chmod +x "$BINARY_PATH"

          # Show binary info
          echo "📊 Binary info:"
          echo "  Size: $(du -h "$BINARY_PATH" | cut -f1)"
          echo "  File type: $(file "$BINARY_PATH")"

          echo "🔍 Running tests..."

          # Test --version
          echo "1. Testing --version..."
          if ./"$BINARY_PATH" --version; then
            echo "   ✅ --version works"
          else
            echo "   ❌ --version failed"
            exit 1
          fi

          # Test --help
          echo "2. Testing --help..."
          if ./"$BINARY_PATH" --help > /dev/null 2>&1; then
            echo "   ✅ --help works"
          else
            echo "   ❌ --help failed"
            exit 1
          fi

          # Test subcommand helps
          echo "3. Testing subcommand help..."
          for cmd in "init" "listen" "login"; do
            echo "   Testing: $cmd --help"
            if timeout 10s ./"$BINARY_PATH" "$cmd" --help > /dev/null 2>&1; then
              echo "   ✅ $cmd --help works"
            else
              echo "   ❌ $cmd --help failed"
              exit 1
            fi
          done

          # Test startup without crash
          echo "4. Testing startup (no crash)..."
          if timeout 5s ./"$BINARY_PATH" --verbose 2>/dev/null || [ $? -eq 124 ]; then
            echo "   ✅ Binary starts without crashing"
          else
            echo "   ❌ Binary crashed on startup"
            exit 1
          fi

          echo "🎉 All tests passed! Binary is working correctly."

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: unhook-${{ matrix.platform }}-${{ matrix.target }}
          path: apps/cli/bin/unhook-${{ matrix.platform }}-${{ matrix.target }}${{ matrix.binary_ext }}
          retention-days: 1