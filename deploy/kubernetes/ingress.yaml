apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unhook-ingress
  namespace: unhook
  annotations:
    # Nginx ingress controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "75"

    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/limit-connections: "100"

    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"

    # TLS/SSL configuration - uncomment and configure based on your setup
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - your-domain.com
    secretName: unhook-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      # Webhook routes - route to webhook router
      - path: /wh_
        pathType: Prefix
        backend:
          service:
            name: unhook-router
            port:
              number: 8080
      - path: /webhook/
        pathType: Prefix
        backend:
          service:
            name: unhook-router
            port:
              number: 8080
      # API and web app routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: unhook-web
            port:
              number: 3000